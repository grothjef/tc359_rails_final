<p id="notice"><%= notice %></p>

<h1>Dota 2 Heroes</h1>

<%= form_tag heros_path, :method => 'get' do %>
  <p>
    <%= text_field_tag :search, params[:search] %>
    <%= submit_tag "Search", :name => nil %>
  </p>
<% end %>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Movespeed</th>
      <th>Turnrate</th>
      <th>Sightrange</th>
      <th>Strength</th>
      <th>Agility</th>
      <th>Intelligence</th>
      <th colspan="3"></th>
    </tr>
  </thead>

  <tbody>
    <% @heros.each do |hero| %>
      <tr>
        <td class="name"><%= hero.name %></td>
        <td class="move"><%= hero.movespeed %></td>
        <td class="turn"><%= hero.turnrate %></td>
        <td><%= hero.sightrange %></td>
        <td><%= hero.strength %></td>
        <td><%= hero.agility %></td>
        <td><%= hero.intelligence %></td>
        <td><%= link_to 'Show', hero %></td>
        <% if user_signed_in? %>
          <td><%= link_to 'Edit', edit_hero_path(hero) %></td>
          <td><%= link_to 'Destroy', hero, method: :delete, data: { confirm: 'Are you sure?' } %></td>
        <% end %>
      </tr>
    <% end %>
  </tbody>
</table>

<br>

<% if user_signed_in? %>
  <%= link_to 'New Hero', new_hero_path %>
<% end %>
<br>
<br>
<h1>Movespeed Chart</h1>
<style>

/*
.chart rect {
  fill: steelblue;
}
*/
.chart .legend {
  fill: black;
  font: 14px sans-serif;
  text-anchor: start;
  font-size: 12px;
}

.chart text {
  fill: white;
  font: 10px sans-serif;
  text-anchor: end;
}

.chart .label {
  fill: black;
  font: 14px sans-serif;
  text-anchor: end;
}

.bar:hover {
  fill: brown;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}


</style>
<svg class="chart"></svg>
<script src="http://d3js.org/d3.v3.min.js"></script>
<script>

var data = {
  labels: [],
  series: [
    {
      label: 'Move Speed',
      values: []
    },]
};

var thenames = document.getElementsByClassName("name");
  for(var i=0; i<thenames.length; i++)
  {
    data.labels.push(thenames[i].innerHTML);
  }

var themoves = document.getElementsByClassName("move");
  for(var i=0; i<themoves.length; i++)
  {
    data.series[0].values.push(themoves[i].innerHTML);
  }

var chartWidth       = 300,
    barHeight        = 20,
    groupHeight      = barHeight * data.series.length,
    gapBetweenGroups = 10,
    spaceForLabels   = 150,
    spaceForLegend   = 150;

// Zip the series data together (first values, second values, etc.)
var zippedData = [];
for (var i=0; i<data.labels.length; i++) {
  for (var j=0; j<data.series.length; j++) {
    zippedData.push(data.series[j].values[i]);
  }
}

// Color scale
var color = d3.scale.category20();
var chartHeight = barHeight * zippedData.length + gapBetweenGroups * data.labels.length;

var x = d3.scale.linear()
    .domain([0, d3.max(zippedData)])
    .range([0, chartWidth]);

var y = d3.scale.linear()
    .range([chartHeight + gapBetweenGroups, 0]);

var yAxis = d3.svg.axis()
    .scale(y)
    .tickFormat('')
    .tickSize(0)
    .orient("left");

// Specify the chart area and dimensions
var chart = d3.select(".chart")
    .attr("width", spaceForLabels + chartWidth + spaceForLegend)
    .attr("height", chartHeight);

// Create bars
var bar = chart.selectAll("g")
    .data(zippedData)
    .enter().append("g")
    .attr("transform", function(d, i) {
      return "translate(" + spaceForLabels + "," + (i * barHeight + gapBetweenGroups * (0.5 + Math.floor(i/data.series.length))) + ")";
    });

// Create rectangles of the correct width
bar.append("rect")
    .attr("fill", function(d,i) { return color(i % data.series.length); })
    .attr("class", "bar")
    .attr("width", x)
    .attr("height", barHeight - 1);

// Add text label in bar
bar.append("text")
    .attr("x", function(d) { return x(d) - 3; })
    .attr("y", barHeight / 2)
    .attr("fill", "red")
    .attr("dy", ".35em")
    .text(function(d) { return d; });

// Draw labels
bar.append("text")
    .attr("class", "label")
    .attr("x", function(d) { return - 10; })
    .attr("y", groupHeight / 2)
    .attr("dy", ".35em")
    .text(function(d,i) {
      if (i % data.series.length === 0)
        return data.labels[Math.floor(i/data.series.length)];
      else
        return ""});

chart.append("g")
      .attr("class", "y axis")
      .attr("transform", "translate(" + spaceForLabels + ", " + -gapBetweenGroups/2 + ")")
      .call(yAxis);

// Draw legend
var legendRectSize = 18,
    legendSpacing  = 4;

var legend = chart.selectAll('.legend')
    .data(data.series)
    .enter()
    .append('g')
    .attr('transform', function (d, i) {
        var height = legendRectSize + legendSpacing;
        var offset = -gapBetweenGroups/2;
        var horz = spaceForLabels + chartWidth + 40 - legendRectSize;
        var vert = i * height - offset;
        return 'translate(' + horz + ',' + vert + ')';
    });

legend.append('rect')
    .attr('width', legendRectSize)
    .attr('height', legendRectSize)
    .style('fill', function (d, i) { return color(i); })
    .style('stroke', function (d, i) { return color(i); });

legend.append('text')
    .attr('class', 'legend')
    .attr('x', legendRectSize + legendSpacing)
    .attr('y', legendRectSize - legendSpacing)
    .text(function (d) { return d.label; });

</script>

<script>

  var data = [];
  var elements = document.getElementsByClassName("move");
  for(var i=0; i<elements.length; i++)
  {
    data.push(elements[i].innerHTML);
  }

</script>

<h1>Highest Win Rates</h1>
<h2>listed by highest this month according to DotaBuff</h2>

<%= @doc.xpath('//tr/td[@class = "cell-xlarge"]').each do |node| %>
      <%= node.text %>
      <br>
    <% end %>
